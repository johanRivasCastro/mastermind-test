{"version":3,"sources":["components/DynamicDialog/DynamicDialog.jsx","components/MatchScore.jsx","utils/colors.js","components/ColorsHole.jsx","components/ColorsRow.jsx","components/DynamicDialog/index.js","pages/Dashboard.jsx","App.js","serviceWorker.js","index.js"],"names":["resolve","useStyles","makeStyles","theme","mainBox","width","height","smallHole","minHeight","borderRadius","border","margin","background","checkButton","color","backgroundColor","borderColor","SmallHole","styles","Box","className","style","MatchScore","colorsCode","userColorsCode","allowedActions","updateCurrentRow","onCorrectCodeApplied","React","useState","matchColors","setMatchColors","useEffect","Button","size","variant","disabled","Object","keys","length","onClick","auxColorsCode","auxUserColorsCode","countBlack","i","validateExactMatchCases","countWhite","secretColorsCode","values","index","indexOf","validatePartialMatchCases","console","log","blacks","whites","colors","forEach","push","setColorsFeedback","Array","display","flexDirection","COLORS","hole","marginRight","marginLeft","cursor","colorsPalette","colorInpalette","colors1","slice","colors2","ColorsHole","holeIndex","onSelectedColor","open","setOpen","selectedColor","setSelectedColor","anchorRef","useRef","handleClose","event","current","contains","target","handleClickSetColor","e","ref","prevOpen","Popper","anchorEl","role","undefined","transition","disablePortal","TransitionProps","placement","Grow","transformOrigin","Paper","ClickAwayListener","onClickAway","justifyContent","alignContent","map","key","alignItems","ColorsRow","setUserColorsCode","modalRoot","document","getElementById","Confirm","props","state","isOpen","showConfirmProps","handleCancel","bind","handleConfirm","show","containerElement","createElement","appendChild","render","DinamicDialog","createConfirmProps","this","setState","Promise","res","message","content","ReactDOM","createPortal","Dialog","onClose","DialogContent","Typography","mt","DialogActions","autoFocus","Component","create","card","minWidth","maxWidth","title","fontFamily","textAlign","fontSize","fontWeight","rightColorsCode","padding","rightColorsCodeBox","restartButton","CrackedCode","Dashboard","setColorsCode","currentRow","setCurrentRow","correctCode","setCorrectCode","generateColorsCode","useCallback","colorsCod","randomNum","Math","floor","random","a","row","Card","CardContent","mb","mr","App","Boolean","window","location","hostname","match","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.d916fbc8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\n\r\nimport {\r\n  DialogActions,\r\n  DialogContent,\r\n  Box,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport { render } from \"react-dom\";\r\n\r\nlet resolve;\r\nconst modalRoot = document.getElementById(\"modal-root\");\r\nclass DinamicDialog extends Component {\r\n  static create(props = {}) {\r\n    const containerElement = document.createElement(\"div\");\r\n    modalRoot.appendChild(containerElement);\r\n\r\n    return render(\r\n      <DinamicDialog createConfirmProps={props} />,\r\n      containerElement\r\n    );\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isOpen: false,\r\n      showConfirmProps: {},\r\n    };\r\n\r\n    this.handleCancel = this.handleCancel.bind(this);\r\n    this.handleConfirm = this.handleConfirm.bind(this);\r\n    this.show = this.show.bind(this);\r\n  }\r\n\r\n  handleCancel() {\r\n    this.setState({ isOpen: false });\r\n    resolve(false);\r\n  }\r\n\r\n  handleConfirm() {\r\n    this.setState({ isOpen: false });\r\n    resolve(true);\r\n  }\r\n\r\n  show(props = {}) {\r\n    const showConfirmProps = { ...this.props.createConfirmProps, ...props };\r\n    this.setState({ isOpen: true, showConfirmProps });\r\n    return new Promise((res) => {\r\n      resolve = res;\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { isOpen, showConfirmProps } = this.state;\r\n    const { message, content } = showConfirmProps;\r\n\r\n    return ReactDOM.createPortal(\r\n      <Box>\r\n        <Dialog open={isOpen} onClose={this.handleCancel}>\r\n          <DialogContent>\r\n            <Typography variant=\"h5\">{message}</Typography>\r\n            <Box display=\"flex\" justifyContent=\"center\" mt={2}>\r\n              {content}\r\n            </Box>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={this.handleConfirm} color=\"primary\" autoFocus>\r\n              Accept\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n      </Box>,\r\n      modalRoot\r\n    );\r\n  }\r\n}\r\n\r\nexport default DinamicDialog;\r\n","import React, { useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport { Box, Button } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  mainBox: {\r\n    width: \"70px\",\r\n    height: \"60px\",\r\n  },\r\n  smallHole: {\r\n    width: \"14px\",\r\n    minHeight: \"14px\",\r\n    borderRadius: \"50%\",\r\n    border: \"1.5px solid #128CBA\",\r\n    margin: \"4px\",\r\n    background: \"#F9DDA3\",\r\n  },\r\n  checkButton: {\r\n    color: \"#FFF !important\",\r\n    backgroundColor: \"#F89B07\",\r\n    borderColor: \"#FFF !important\",\r\n    \"&:disabled\": {\r\n      color: \"#F9DDA3 !important\",\r\n      borderColor: \"#fff !important\",\r\n      backgroundColor: \"#BDBDBD\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst SmallHole = ({ color }) => {\r\n  const styles = useStyles();\r\n  return <Box className={styles.smallHole} style={{ background: color }} />;\r\n};\r\n\r\nconst MatchScore = ({\r\n  colorsCode,\r\n  userColorsCode,\r\n  allowedActions,\r\n  updateCurrentRow = () => {},\r\n  onCorrectCodeApplied = () => {},\r\n}) => {\r\n  const styles = useStyles();\r\n  const [matchColors, setMatchColors] = React.useState([]);\r\n\r\n  const allRowColorsSelected = () => {\r\n    return Object.keys(userColorsCode).length === 4;\r\n  };\r\n\r\n  const validateExactMatchCases = () => {\r\n    let auxColorsCode = { ...colorsCode };\r\n    let auxUserColorsCode = { ...userColorsCode };\r\n    let countBlack = 0;\r\n    for (let i = 0; i < 4; i++) {\r\n      if (auxColorsCode[i] === userColorsCode[i]) {\r\n        auxColorsCode[i] = \"match\";\r\n        auxUserColorsCode[i] = \"match\";\r\n        countBlack++;\r\n      }\r\n    }\r\n    return {\r\n      auxColorsCode,\r\n      auxUserColorsCode,\r\n      countBlack,\r\n    };\r\n  };\r\n\r\n  const validatePartialMatchCases = (auxColorsCode, auxUserColorsCode) => {\r\n    let countWhite = 0;\r\n    let secretColorsCode = Object.values(auxColorsCode);\r\n    for (let i = 0; i < 4; i++) {\r\n      if (auxUserColorsCode[i] !== \"match\") {\r\n        let index = secretColorsCode.indexOf(auxUserColorsCode[i]);\r\n        if (index > -1) {\r\n          secretColorsCode[index] = \"partialMatch\";\r\n          countWhite++;\r\n        }\r\n      }\r\n    }\r\n    return countWhite;\r\n  };\r\n\r\n  const setColorsFeedback = (blacks = [], whites = []) => {\r\n    let colors = [];\r\n\r\n    blacks.forEach(() => {\r\n      colors.push(\"black\");\r\n    });\r\n    whites.forEach(() => {\r\n      colors.push(\"white\");\r\n    });\r\n\r\n    setMatchColors(colors);\r\n    updateCurrentRow();\r\n    if (blacks.length === 4) onCorrectCodeApplied();\r\n  };\r\n\r\n  const handleClickValidateUserCode = () => {\r\n    const {\r\n      auxColorsCode,\r\n      auxUserColorsCode,\r\n      countBlack,\r\n    } = validateExactMatchCases();\r\n    const countWhite = validatePartialMatchCases(\r\n      auxColorsCode,\r\n      auxUserColorsCode\r\n    );\r\n\r\n    //next line should be removed in a not testing project\r\n    console.log(colorsCode, userColorsCode);\r\n    setColorsFeedback([...Array(countBlack)], [...Array(countWhite)]);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setMatchColors([]);\r\n  }, [colorsCode]);\r\n\r\n  return (\r\n    <>\r\n      {allowedActions ? (\r\n        <Button\r\n          className={styles.checkButton}\r\n          size=\"small\"\r\n          variant=\"outlined\"\r\n          disabled={!allRowColorsSelected()}\r\n          onClick={handleClickValidateUserCode}\r\n        >\r\n          Check\r\n        </Button>\r\n      ) : (\r\n        <Box className={styles.mainBox}>\r\n          <Box display=\"flex\" flexDirection=\"row\">\r\n            <SmallHole color={matchColors[0]} />\r\n            <SmallHole color={matchColors[1]} />\r\n          </Box>\r\n          <Box display=\"flex\" flexDirection=\"row\">\r\n            <SmallHole color={matchColors[2]} />\r\n            <SmallHole color={matchColors[3]} />\r\n          </Box>\r\n        </Box>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MatchScore;\r\n","const COLORS = [\"red\", \"blue\", \"white\", \"green\", \"black\", \"yellow\"];\r\nexport default COLORS;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Box, Popper, Paper, ClickAwayListener, Grow } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport COLORS from \"../utils/colors\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  hole: {\r\n    width: \"36px\",\r\n    height: \"36px\",\r\n    borderRadius: \"50%\",\r\n    border: \"2px solid #128CBA\",\r\n    marginRight: \"10px\",\r\n    marginLeft: \"10px\",\r\n    cursor: \"pointer\",\r\n    background: \"#F9DDA3\",\r\n  },\r\n  colorsPalette: {\r\n    width: \"125px\",\r\n    height: \"110px\",\r\n    border: \"3px solid #FFF\",\r\n    borderRadius: \"20px !important\",\r\n  },\r\n  colorInpalette: {\r\n    width: \"30px\",\r\n    height: \"30px\",\r\n    border: \"1px solid #C0C0C0\",\r\n    borderRadius: \"50%\",\r\n    margin: \"5px\",\r\n    cursor: \"pointer\",\r\n  },\r\n}));\r\n\r\nlet colors1 = COLORS.slice(0, 3);\r\nlet colors2 = COLORS.slice(2 + 1);\r\n\r\nconst ColorsHole = ({\r\n  holeIndex,\r\n  allowedActions,\r\n  onSelectedColor = () => {},\r\n  color = null,\r\n  colorsCode,\r\n}) => {\r\n  const styles = useStyles();\r\n\r\n  const [open, setOpen] = React.useState(false);\r\n  const [selectedColor, setSelectedColor] = useState(\"\");\r\n  const anchorRef = React.useRef(null);\r\n\r\n  const handleToggle = () => {\r\n    if (allowedActions) setOpen((prevOpen) => !prevOpen);\r\n  };\r\n\r\n  const handleClose = (event) => {\r\n    if (anchorRef.current && anchorRef.current.contains(event.target)) return;\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleClickSetColor = (e, color) => {\r\n    setSelectedColor(color);\r\n    onSelectedColor(holeIndex, color);\r\n    handleClose(e);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setSelectedColor([]);\r\n  }, [colorsCode]);\r\n\r\n  return (\r\n    <>\r\n      <Box\r\n        ref={anchorRef}\r\n        className={styles.hole}\r\n        onClick={handleToggle}\r\n        style={{ background: color ? color : selectedColor }}\r\n      ></Box>\r\n      <Popper\r\n        open={open}\r\n        anchorEl={anchorRef.current}\r\n        role={undefined}\r\n        transition\r\n        disablePortal\r\n      >\r\n        {({ TransitionProps, placement }) => (\r\n          <Grow\r\n            {...TransitionProps}\r\n            style={{\r\n              transformOrigin:\r\n                placement === \"bottom\" ? \"center top\" : \"center bottom\",\r\n            }}\r\n          >\r\n            <Paper>\r\n              <ClickAwayListener onClickAway={handleClose}>\r\n                <Box\r\n                  className={styles.colorsPalette}\r\n                  display=\"flex\"\r\n                  flexDirection=\"column\"\r\n                  justifyContent=\"center\"\r\n                  alignContent=\"center\"\r\n                >\r\n                  <Box display=\"flex\" flexDirection=\"row\">\r\n                    {colors1.map((color, i) => (\r\n                      <Box\r\n                        key={i}\r\n                        className={styles.colorInpalette}\r\n                        style={{ background: color }}\r\n                        onClick={(e) => handleClickSetColor(e, color)}\r\n                      />\r\n                    ))}\r\n                  </Box>\r\n                  <Box display=\"flex\" flexDirection=\"row\">\r\n                    {colors2.map((color, i) => (\r\n                      <Box\r\n                        key={i}\r\n                        className={styles.colorInpalette}\r\n                        style={{ background: color }}\r\n                        onClick={(e) => handleClickSetColor(e, color)}\r\n                      />\r\n                    ))}\r\n                  </Box>\r\n                </Box>\r\n              </ClickAwayListener>\r\n            </Paper>\r\n          </Grow>\r\n        )}\r\n      </Popper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ColorsHole;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport { Box } from \"@material-ui/core\";\r\nimport MatchScore from \"./MatchScore\";\r\nimport ColorsHole from \"./ColorsHole\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  mainBox: {\r\n    width: \"350px\",\r\n    height: \"80px\",\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n  },\r\n}));\r\n\r\nconst ColorsRow = ({\r\n  colorsCode,\r\n  allowedActions,\r\n  updateCurrentRow = () => {},\r\n  onCorrectCodeApplied = () => {},\r\n}) => {\r\n  const styles = useStyles();\r\n\r\n  const [userColorsCode, setUserColorsCode] = useState({});\r\n\r\n  const onSelectedColor = (holeIndex, color) => {\r\n    setUserColorsCode({\r\n      ...userColorsCode,\r\n      [holeIndex]: color,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    setUserColorsCode({});\r\n  }, [colorsCode]);\r\n\r\n  return (\r\n    <Box className={styles.mainBox}>\r\n      <MatchScore\r\n        colorsCode={colorsCode}\r\n        userColorsCode={userColorsCode}\r\n        allowedActions={allowedActions}\r\n        updateCurrentRow={updateCurrentRow}\r\n        onCorrectCodeApplied={onCorrectCodeApplied}\r\n      />\r\n      <Box\r\n        display=\"flex\"\r\n        flexDirection=\"row\"\r\n        alignItems=\"center\"\r\n        justifyContent=\"center\"\r\n      >\r\n        {[...Array(4)].map((e, i) => (\r\n          <ColorsHole\r\n            key={i}\r\n            holeIndex={i}\r\n            colorsCode={colorsCode}\r\n            onSelectedColor={onSelectedColor}\r\n            allowedActions={allowedActions}\r\n          />\r\n        ))}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ColorsRow;\r\n","import Confirm from \"./DynamicDialog\";\r\n\r\nexport default Confirm.create({});\r\n","import React, { useEffect, useState, useCallback } from \"react\";\r\nimport { Card, CardContent, Box, Button } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport ColorsRow from \"../components/ColorsRow\";\r\nimport COLORS from \"../utils/colors\";\r\nimport ColorsHole from \"../components/ColorsHole\";\r\nimport Confirm from \"../components/DynamicDialog\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  card: {\r\n    minWidth: 275,\r\n    maxWidth: \"360px\",\r\n    minHeight: \"600px\",\r\n    margin: \"50px auto\",\r\n    background: \"#71CEED\",\r\n    border: \"1px solid #128CBA\",\r\n  },\r\n  title: {\r\n    fontFamily: \"Open Sans Condensed\",\r\n    textAlign: \"center\",\r\n    fontSize: \"35px\",\r\n    fontWeight: \"bold\",\r\n    color: \"#F5F5F5\",\r\n  },\r\n  rightColorsCode: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n    border: \"1.5px solid #128CBA\",\r\n    padding: \"5px\",\r\n    maxWidth: \"248px\",\r\n    borderRadius: \"6px\",\r\n  },\r\n  rightColorsCodeBox: {\r\n    display: \"flex\",\r\n    justifyContent: \"flex-end\",\r\n    marginLeft: \"61px\",\r\n  },\r\n  restartButton: {\r\n    marginLeft: \"auto\",\r\n    color: \"#FFF !important\",\r\n    backgroundColor: \"#F89B07\",\r\n    borderColor: \"#FFF !important\",\r\n    \"&:disabled\": {\r\n      color: \"#F9DDA3 !important\",\r\n      borderColor: \"#fff !important\",\r\n      backgroundColor: \"#BDBDBD\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst CrackedCode = ({ colorsCode }) => {\r\n  const styles = useStyles();\r\n  return (\r\n    <Box className={styles.rightColorsCode}>\r\n      <ColorsHole color={colorsCode[0]} />\r\n      <ColorsHole color={colorsCode[1]} />\r\n      <ColorsHole color={colorsCode[2]} />\r\n      <ColorsHole color={colorsCode[3]} />\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst Dashboard = () => {\r\n  const styles = useStyles();\r\n  const [colorsCode, setColorsCode] = useState({});\r\n  const [currentRow, setCurrentRow] = useState(0);\r\n  const [correctCode, setCorrectCode] = useState(false);\r\n\r\n  const generateColorsCode = useCallback(() => {\r\n    let colorsCod = {};\r\n    for (let i = 0; i < 4; i++) {\r\n      const randomNum = Math.floor(Math.random() * COLORS.length);\r\n      colorsCod[i] = COLORS[randomNum];\r\n    }\r\n    setColorsCode(colorsCod);\r\n  }, []);\r\n\r\n  const updateCurrentRow = async () => {\r\n    let row = currentRow;\r\n    row++;\r\n    if (row > 9) {\r\n      await Confirm.show({\r\n        message: \"You have exhausted all attempts\",\r\n      });\r\n    }\r\n    setCurrentRow(row);\r\n  };\r\n\r\n  const onCorrectCodeApplied = async () => {\r\n    setCorrectCode(true);\r\n    setCurrentRow(11);\r\n    await Confirm.show({\r\n      message: \"You have cracked the code !!!\",\r\n      content: <CrackedCode colorsCode={colorsCode} />,\r\n    });\r\n  };\r\n\r\n  const handleClickReestart = () => {\r\n    setCurrentRow(0);\r\n    generateColorsCode();\r\n    setCorrectCode(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    generateColorsCode();\r\n  }, [generateColorsCode]);\r\n\r\n  return (\r\n    <Card className={styles.card}>\r\n      <CardContent>\r\n        <Box mb={3} className={styles.title}>\r\n          Mastermind\r\n        </Box>\r\n        <Box display=\"flex\" justifyContent=\"flex-end\" mr={2} mb={2}>\r\n          <Button\r\n            className={styles.restartButton}\r\n            size=\"small\"\r\n            variant=\"outlined\"\r\n            disabled={currentRow < 1}\r\n            onClick={handleClickReestart}\r\n          >\r\n            Reestart\r\n          </Button>\r\n        </Box>\r\n        {correctCode && (\r\n          <Box className={styles.rightColorsCodeBox}>\r\n            <CrackedCode colorsCode={colorsCode} />\r\n          </Box>\r\n        )}\r\n\r\n        {[...Array(10)].map((e, i) => (\r\n          <ColorsRow\r\n            key={i}\r\n            colorsCode={colorsCode}\r\n            allowedActions={i === currentRow}\r\n            updateCurrentRow={updateCurrentRow}\r\n            onCorrectCodeApplied={onCorrectCodeApplied}\r\n          />\r\n        ))}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","import React from \"react\";\nimport Dashboard from \"./pages/Dashboard\";\n\nfunction App() {\n  return <Dashboard />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}